<start of App.tsx>
import React from 'react'; import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'; import { DashboardLayout, companyNavigation } from '@security-guard/shared'; import Dashboard from './pages/Dashboard'; import Guards from './pages/Guards'; import Scheduling from './pages/Scheduling'; import Operations from './pages/Operations'; import Clients from './pages/Clients'; import './index.css'; // Placeholder pages for remaining routes const Reports = () => ( <div> <h2 className="text-3xl font-bold text-gray-900 mb-4">Reports & Analytics</h2> <p className="text-gray-600">Generate comprehensive business reports</p> <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6"> <p className="text-blue-800">This page will contain report generation tools and business analytics.</p> </div> </div> ); const Settings = () => ( <div> <h2 className="text-3xl font-bold text-gray-900 mb-4">Company Settings</h2> <p className="text-gray-600">Manage company profile and preferences</p> <div className="mt-8 bg-purple-50 border border-purple-200 rounded-lg p-6"> <p className="text-purple-800">This page will contain company settings and configuration options.</p> </div> </div> ); // Login component for company portal const LoginPage = () => ( <div className="min-h-screen bg-gray-50 flex items-center justify-center"> <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8"> <div className="text-center mb-8"> <div className="h-16 w-16 bg-green-600 rounded-lg flex items-center justify-center mx-auto mb-4"> <span className="text-white text-2xl">üè¢</span> </div> <h1 className="text-3xl font-bold text-gray-900">Company Portal</h1> <p className="text-gray-600 mt-2">Access your security company dashboard</p> </div> <form className="space-y-6"> <div> <label className="block text-sm font-medium text-gray-700">Company Email</label> <input type="email" required className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" placeholder="admin@securemax.com" /> </div> <div> <label className="block text-sm font-medium text-gray-700">Password</label> <input type="password" required className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" /> </div> <div className="flex items-center"> <input type="checkbox" className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded" /> <label className="ml-2 block text-sm text-gray-900">Keep me signed in</label> </div> <button type="submit" className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors" > Access Company Portal </button> </form> <div className="mt-6 text-center"> <p className="text-sm text-gray-600"> üîí Secure access for registered security companies <br /> Need help? Contact: <span className="font-medium">support@secureguard.com</span> </p> <div className="mt-4 text-xs text-gray-500"> <p>Demo Login: admin@securemax.com</p> <p>Password: demo123</p> </div> </div> </div> </div> ); // Main app component with routing function App() { // For demo purposes, we'll simulate being logged in const isLoggedIn = true; // In real app, this would come from auth context if (!isLoggedIn) { return <LoginPage />; } return ( <Router> <DashboardLayout title="SecureMax Ltd Portal" navigation={companyNavigation} userRole="Company Administrator" userName="Michael Rodriguez" > <Routes> <Route path="/" element={<Navigate to="/dashboard" replace />} /> <Route path="/dashboard" element={<Dashboard />} /> <Route path="/guards" element={<Guards />} /> <Route path="/scheduling" element={<Scheduling />} /> <Route path="/operations" element={<Operations />} /> <Route path="/clients" element={<Clients />} /> <Route path="/reports" element={<Reports />} /> <Route path="/settings" element={<Settings />} /> </Routes> </DashboardLayout> </Router> ); } export default App;
<end of App.tsx>

<start of index.css>
@tailwind base; @tailwind components; @tailwind utilities; body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } @layer components { .status-badge { @apply inline-flex px-2 py-1 text-xs font-semibold rounded-full; } .status-on-duty { @apply bg-green-100 text-green-800; } .status-off-duty { @apply bg-gray-100 text-gray-800; } .status-available { @apply bg-blue-100 text-blue-800; } .status-training { @apply bg-yellow-100 text-yellow-800; } .alert-high { @apply bg-red-50 border-red-200 text-red-800; } .alert-medium { @apply bg-yellow-50 border-yellow-200 text-yellow-800; } .alert-low { @apply bg-blue-50 border-blue-200 text-blue-800; } }
<end of index.css>

<start of main.tsx>
import React from 'react' import ReactDOM from 'react-dom/client' import App from './App' ReactDOM.createRoot(document.getElementById('root')!).render( <React.StrictMode> <App /> </React.StrictMode>, )
<end of main.tsx>

<start of pages/Clients.tsx>
import React, { useState } from 'react'; import { Card, Button } from '@security-guard/shared'; const Clients: React.FC = () => { const [searchTerm, setSearchTerm] = useState(''); const mockClients = [ { id: 1, name: 'Metro Shopping Mall', contact: 'Sarah Wilson', email: 'sarah@metromall.com', phone: '+1-555-0150', contract: 'Premium Security Package', guards: 3, status: 'Active', value: '$15,200/month', nextPayment: '2024-02-01', address: '123 Main St, Downtown', startDate: '2023-06-15', rating: 4.9 }, { id: 2, name: 'TechCorp Office Complex', contact: 'Michael Chen', email: 'security@techcorp.com', phone: '+1-555-0151', contract: 'Standard Office Security', guards: 2, status: 'Active', value: '$8,400/month', nextPayment: '2024-02-03', address: '456 Business Ave, Tech District', startDate: '2023-08-20', rating: 4.7 }, { id: 3, name: 'Industrial Warehouse Co', contact: 'David Martinez', email: 'ops@warehouse.com', phone: '+1-555-0152', contract: 'Industrial Security', guards: 4, status: 'Pending Renewal', value: '$18,600/month', nextPayment: '2024-01-25', address: '789 Industrial Blvd, Warehouse District', startDate: '2022-12-10', rating: 4.6 }, { id: 4, name: 'Retail Plaza Shopping', contact: 'Jennifer Adams', email: 'security@retailplaza.com', phone: '+1-555-0153', contract: 'Retail Security Plus', guards: 2, status: 'Active', value: '$9,800/month', nextPayment: '2024-02-05', address: '321 Shopping Way, Retail Center', startDate: '2023-04-12', rating: 4.8 }, { id: 5, name: 'Business Center Plaza', contact: 'Robert Kim', email: 'admin@businesscenter.com', phone: '+1-555-0154', contract: 'Corporate Security', guards: 3, status: 'Active', value: '$12,500/month', nextPayment: '2024-02-02', address: '555 Corporate Dr, Business District', startDate: '2023-09-01', rating: 4.5 } ]; const getStatusColor = (status: string) => { switch (status) { case 'Active': return 'status-badge bg-green-100 text-green-800'; case 'Pending Renewal': return 'status-badge bg-yellow-100 text-yellow-800'; case 'Expired': return 'status-badge bg-red-100 text-red-800'; case 'Suspended': return 'status-badge bg-gray-100 text-gray-800'; default: return 'status-badge bg-gray-100 text-gray-800'; } }; const filteredClients = mockClients.filter(client => client.name.toLowerCase().includes(searchTerm.toLowerCase()) || client.contact.toLowerCase().includes(searchTerm.toLowerCase()) ); // Calculate summary stats const totalRevenue = mockClients.reduce((sum, client) => { return sum + parseInt(client.value.replace(/[$,\/month]/g, '')); }, 0); const activeClients = mockClients.filter(c => c.status === 'Active').length; const totalGuards = mockClients.reduce((sum, client) => sum + client.guards, 0); const averageRating = mockClients.reduce((sum, client) => sum + client.rating, 0) / mockClients.length; return ( <div> {/* Header */} <div className="mb-8 flex justify-between items-center"> <div> <h2 className="text-3xl font-bold text-gray-900">Client Management</h2> <p className="text-gray-600">Manage client contracts and relationships</p> </div> <div className="flex gap-2"> <Button variant="outline">Export Clients</Button> <Button variant="primary">Add New Client</Button> </div> </div> {/* Summary Statistics */} <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8"> <Card> <div className="text-center"> <div className="text-3xl font-bold text-green-600">{mockClients.length}</div> <p className="text-sm text-gray-600">Total Clients</p> </div> </Card> <Card> <div className="text-center"> <div className="text-3xl font-bold text-blue-600">{activeClients}</div> <p className="text-sm text-gray-600">Active Contracts</p> </div> </Card> <Card> <div className="text-center"> <div className="text-3xl font-bold text-purple-600">${totalRevenue.toLocaleString()}</div> <p className="text-sm text-gray-600">Monthly Revenue</p> </div> </Card> <Card> <div className="text-center"> <div className="text-3xl font-bold text-yellow-600">{averageRating.toFixed(1)}</div> <p className="text-sm text-gray-600">Average Rating</p> </div> </Card> </div> {/* Search and Actions */} <Card className="mb-6"> <div className="flex flex-col sm:flex-row justify-between gap-4"> <div className="flex-1"> <input type="text" placeholder="Search clients by name or contact..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-green-500 focus:border-green-500" /> </div> <div className="flex gap-2"> <select className="px-4 py-2 border border-gray-300 rounded-md focus:ring-green-500 focus:border-green-500"> <option value="">All Statuses</option> <option value="active">Active</option> <option value="pending">Pending Renewal</option> <option value="expired">Expired</option> </select> <Button variant="outline">Filter</Button> </div> </div> </Card> {/* Clients Grid */} <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> {filteredClients.map((client) => ( <Card key={client.id}> <div className="space-y-4"> {/* Header with Status */} <div className="flex justify-between items-start"> <div> <h3 className="text-xl font-bold text-gray-900">{client.name}</h3> <p className="text-gray-600">{client.address}</p> </div> <span className={getStatusColor(client.status)}> {client.status} </span> </div> {/* Contact Information */} <div className="bg-gray-50 rounded-lg p-4"> <h4 className="font-medium text-gray-900 mb-2">Contact Information</h4> <div className="space-y-1 text-sm"> <p><span className="text-gray-500">Contact:</span> <span className="font-medium">{client.contact}</span></p> <p><span className="text-gray-500">Email:</span> <span className="font-medium">{client.email}</span></p> <p><span className="text-gray-500">Phone:</span> <span className="font-medium">{client.phone}</span></p> </div> </div> {/* Contract Details */} <div className="grid grid-cols-2 gap-4 text-sm"> <div> <span className="text-gray-500 block">Contract Type:</span> <span className="font-medium">{client.contract}</span> </div> <div> <span className="text-gray-500 block">Monthly Value:</span> <span className="font-medium text-green-600">{client.value}</span> </div> <div> <span className="text-gray-500 block">Assigned Guards:</span> <span className="font-medium">{client.guards} guards</span> </div> <div> <span className="text-gray-500 block">Client Rating:</span> <div className="flex items-center"> <span className="text-yellow-400 mr-1">‚òÖ</span> <span className="font-medium">{client.rating}/5.0</span> </div> </div> <div> <span className="text-gray-500 block">Start Date:</span> <span className="font-medium">{client.startDate}</span> </div> <div> <span className="text-gray-500 block">Next Payment:</span> <span className="font-medium">{client.nextPayment}</span> </div> </div> {/* Action Buttons */} <div className="flex flex-wrap gap-2 pt-2"> <Button size="sm" variant="outline">View Details</Button> <Button size="sm" variant="outline">Edit Contract</Button> <Button size="sm" variant="outline">View Guards</Button> <Button size="sm" variant="primary">Contact</Button> </div> </div> </Card> ))} </div> {/* Summary Footer */} <div className="mt-8 bg-green-50 border border-green-200 rounded-lg p-6"> <h3 className="text-lg font-medium text-gray-900 mb-4">Client Portfolio Summary</h3> <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div> <div className="text-lg font-bold text-green-600">{totalGuards}</div> <div className="text-sm text-gray-600">Total Guards Deployed</div> </div> <div> <div className="text-lg font-bold text-blue-600">${(totalRevenue * 12).toLocaleString()}</div> <div className="text-sm text-gray-600">Annual Revenue Value</div> </div> <div> <div className="text-lg font-bold text-purple-600">{Math.round(totalRevenue / activeClients).toLocaleString()}</div> <div className="text-sm text-gray-600">Avg Monthly per Client</div> </div> <div> <div className="text-lg font-bold text-yellow-600">{Math.round(totalGuards / activeClients * 10) / 10}</div> <div className="text-sm text-gray-600">Avg Guards per Client</div> </div> </div> </div> </div> ); }; export default Clients;
<end of pages/Clients.tsx>

<start of pages/Dashboard.tsx>
import React from 'react'; import { Card } from '@security-guard/shared'; const Dashboard: React.FC = () => { // Mock company data - SecureMax Ltd example const companyStats = { companyName: "SecureMax Ltd", totalGuards: 245, onDutyGuards: 89, availableGuards: 67, totalClients: 34, activeContracts: 52, monthlyRevenue: 145750, todayIncidents: 3, missedCheckIns: 2, completedShifts: 156, averageRating: 4.7 }; const operationalAlerts = [ { type: "high", title: "Missed Check-ins", message: "2 guards missed their scheduled check-ins", time: "15 min ago" }, { type: "medium", title: "Shift Coverage", message: "3 shifts need coverage for tomorrow", time: "1 hour ago" }, { type: "low", title: "Training Due", message: "15 guards need annual training update", time: "2 hours ago" }, { type: "medium", title: "Client Request", message: "New security request from Metro Mall", time: "3 hours ago" } ]; const recentActivity = [ { guard: "John Smith", action: "Started shift", location: "Downtown Mall", time: "30 min ago", status: "active" }, { guard: "Maria Garcia", action: "Completed patrol", location: "Office Complex A", time: "1 hour ago", status: "completed" }, { guard: "Ahmed Hassan", action: "Incident report filed", location: "Warehouse District", time: "2 hours ago", status: "reported" }, { guard: "Sarah Johnson", action: "Shift ended", location: "Shopping Center", time: "3 hours ago", status: "completed" }, { guard: "David Chen", action: "Training completed", location: "Training Center", time: "4 hours ago", status: "completed" } ]; const getAlertClass = (type: string) => { switch (type) { case 'high': return 'alert-high border rounded-lg p-4'; case 'medium': return 'alert-medium border rounded-lg p-4'; case 'low': return 'alert-low border rounded-lg p-4'; default: return 'bg-gray-50 border border-gray-200 rounded-lg p-4'; } }; const getActivityStatusColor = (status: string) => { switch (status) { case 'active': return 'text-green-600'; case 'completed': return 'text-blue-600'; case 'reported': return 'text-orange-600'; default: return 'text-gray-600'; } }; return ( <div> {/* Header */} <div className="mb-8"> <h2 className="text-3xl font-bold text-gray-900">{companyStats.companyName} Dashboard</h2> <p className="text-gray-600">Operational overview and key performance metrics</p> </div> {/* Key Metrics Grid */} <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center"> <span className="text-blue-600 text-lg">üë•</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">Total Guards</p> <p className="text-2xl font-bold text-gray-900">{companyStats.totalGuards}</p> </div> </div> </Card> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center"> <span className="text-green-600 text-lg">üü¢</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">On Duty Now</p> <p className="text-2xl font-bold text-gray-900">{companyStats.onDutyGuards}</p> </div> </div> </Card> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center"> <span className="text-purple-600 text-lg">üè¢</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">Active Clients</p> <p className="text-2xl font-bold text-gray-900">{companyStats.totalClients}</p> </div> </div> </Card> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center"> <span className="text-green-600 text-lg">üí∞</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">Monthly Revenue</p> <p className="text-2xl font-bold text-gray-900">${companyStats.monthlyRevenue.toLocaleString()}</p> </div> </div> </Card> </div> {/* Secondary Metrics */} <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8"> <Card> <div className="text-center"> <div className="text-2xl font-bold text-blue-600">{companyStats.availableGuards}</div> <p className="text-sm text-gray-600">Available Guards</p> </div> </Card> <Card> <div className="text-center"> <div className="text-2xl font-bold text-green-600">{companyStats.activeContracts}</div> <p className="text-sm text-gray-600">Active Contracts</p> </div> </Card> <Card> <div className="text-center"> <div className="text-2xl font-bold text-orange-600">{companyStats.todayIncidents}</div> <p className="text-sm text-gray-600">Today's Incidents</p> </div> </Card> <Card> <div className="text-center"> <div className="text-2xl font-bold text-yellow-600">{companyStats.averageRating}</div> <p className="text-sm text-gray-600">Average Rating</p> </div> </Card> </div> {/* Alerts and Activity Grid */} <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8"> {/* Operational Alerts */} <Card title="Operational Alerts" subtitle="Important notifications requiring attention"> <div className="space-y-4"> {operationalAlerts.map((alert, index) => ( <div key={index} className={getAlertClass(alert.type)}> <div className="flex items-start justify-between"> <div className="flex items-center"> <div className={`w-3 h-3 rounded-full mr-3 ${ alert.type === 'high' ? 'bg-red-500' : alert.type === 'medium' ? 'bg-yellow-500' : 'bg-blue-500' }`}></div> <div> <p className="font-medium text-sm">{alert.title}</p> <p className="text-sm mt-1">{alert.message}</p> </div> </div> <span className="text-xs opacity-75">{alert.time}</span> </div> </div> ))} </div> </Card> {/* Recent Guard Activity */} <Card title="Recent Guard Activity" subtitle="Latest field operations and updates"> <div className="space-y-4"> {recentActivity.map((activity, index) => ( <div key={index} className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0"> <div className="flex items-center space-x-3"> <div className="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center"> <span className="text-sm font-medium text-gray-600"> {activity.guard.split(' ').map(n => n[0]).join('')} </span> </div> <div> <p className="font-medium text-gray-900 text-sm">{activity.guard}</p> <p className={`text-sm ${getActivityStatusColor(activity.status)}`}>{activity.action}</p> <p className="text-xs text-gray-500">{activity.location}</p> </div> </div> <span className="text-xs text-gray-500">{activity.time}</span> </div> ))} </div> </Card> </div> {/* Live Guard Map Placeholder */} <Card title="Live Guard Locations" subtitle="Real-time tracking of on-duty guards"> <div className="h-80 bg-gradient-to-br from-green-50 to-blue-50 rounded-lg flex items-center justify-center"> <div className="text-center"> <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"> <span className="text-3xl">üó∫Ô∏è</span> </div> <h3 className="text-lg font-medium text-gray-900 mb-2">Interactive Guard Map</h3> <p className="text-gray-600 mb-4">Real-time locations and status of on-duty guards</p> <div className="grid grid-cols-2 gap-4 text-sm"> <div className="bg-white rounded-lg p-3"> <div className="font-semibold text-green-600">{companyStats.onDutyGuards}</div> <div className="text-gray-600">Guards On Duty</div> </div> <div className="bg-white rounded-lg p-3"> <div className="font-semibold text-blue-600">{companyStats.totalClients}</div> <div className="text-gray-600">Active Sites</div> </div> </div> </div> </div> </Card> </div> ); }; export default Dashboard;
<end of pages/Dashboard.tsx>

<start of pages/Guards.tsx>
import React, { useState } from 'react'; import { Card, Button } from '@security-guard/shared'; const Guards: React.FC = () => { const [selectedTab, setSelectedTab] = useState('all'); const [searchTerm, setSearchTerm] = useState(''); // Mock guard data for SecureMax Ltd const mockGuards = [ { id: 1, name: "John Smith", license: "GRD-2024-001", status: "On Duty", assignment: "Downtown Mall", shift: "Day Shift (8AM-4PM)", phone: "+1-555-0123", rating: 4.8, experience: "3 years", certifications: ["Basic Security", "First Aid"], lastCheckIn: "2 hours ago" }, { id: 2, name: "Maria Garcia", license: "GRD-2024-002", status: "Off Duty", assignment: "Office Complex A", shift: "Night Shift (10PM-6AM)", phone: "+1-555-0124", rating: 4.9, experience: "5 years", certifications: ["Basic Security", "Armed Guard"], lastCheckIn: "8 hours ago" }, { id: 3, name: "Ahmed Hassan", license: "GRD-2024-003", status: "On Duty", assignment: "Warehouse District", shift: "Evening Shift (4PM-12AM)", phone: "+1-555-0125", rating: 4.7, experience: "2 years", certifications: ["Basic Security"], lastCheckIn: "30 min ago" }, { id: 4, name: "Sarah Johnson", license: "GRD-2024-004", status: "Available", assignment: "Unassigned", shift: "Flexible", phone: "+1-555-0126", rating: 4.6, experience: "4 years", certifications: ["Basic Security", "Crowd Control"], lastCheckIn: "1 day ago" }, { id: 5, name: "David Chen", license: "GRD-2024-005", status: "Training", assignment: "Training Center", shift: "Training Schedule", phone: "+1-555-0127", rating: 4.5, experience: "1 year", certifications: ["Basic Security"], lastCheckIn: "4 hours ago" }, { id: 6, name: "Lisa Rodriguez", license: "GRD-2024-006", status: "On Duty", assignment: "Shopping Center", shift: "Day Shift (6AM-2PM)", phone: "+1-555-0128", rating: 4.8, experience: "6 years", certifications: ["Basic Security", "First Aid", "Fire Safety"], lastCheckIn: "1 hour ago" } ]; const tabs = [ { id: 'all', label: 'All Guards', count: mockGuards.length }, { id: 'onduty', label: 'On Duty', count: mockGuards.filter(g => g.status === 'On Duty').length }, { id: 'available', label: 'Available', count: mockGuards.filter(g => g.status === 'Available').length }, { id: 'training', label: 'In Training', count: mockGuards.filter(g => g.status === 'Training').length } ]; const getStatusColor = (status: string) => { switch (status) { case 'On Duty': return 'status-badge status-on-duty'; case 'Off Duty': return 'status-badge status-off-duty'; case 'Available': return 'status-badge status-available'; case 'Training': return 'status-badge status-training'; default: return 'status-badge status-off-duty'; } }; const filteredGuards = mockGuards.filter(guard => guard.name.toLowerCase().includes(searchTerm.toLowerCase()) || guard.assignment.toLowerCase().includes(searchTerm.toLowerCase()) || guard.license.toLowerCase().includes(searchTerm.toLowerCase()) ); return ( <div> {/* Header */} <div className="mb-8 flex justify-between items-center"> <div> <h2 className="text-3xl font-bold text-gray-900">Guard Management</h2> <p className="text-gray-600">Manage your security guards and assignments</p> </div> <div className="flex gap-2"> <Button variant="outline">Import Guards</Button> <Button variant="primary">Add New Guard</Button> </div> </div> {/* Tabs */} <div className="border-b border-gray-200 mb-6"> <nav className="-mb-px flex space-x-8"> {tabs.map((tab) => ( <button key={tab.id} onClick={() => setSelectedTab(tab.id)} className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${ selectedTab === tab.id ? 'border-green-500 text-green-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300' }`} > {tab.label} ({tab.count}) </button> ))} </nav> </div> {/* Search and Quick Actions */} <Card className="mb-6"> <div className="flex flex-col lg:flex-row gap-4"> <div className="flex-1"> <input type="text" placeholder="Search guards by name, license, or assignment..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-green-500 focus:border-green-500" /> </div> <div className="flex gap-2"> <select className="px-4 py-2 border border-gray-300 rounded-md focus:ring-green-500 focus:border-green-500"> <option value="">All Assignments</option> <option value="downtown">Downtown Mall</option> <option value="office">Office Complex A</option> <option value="warehouse">Warehouse District</option> <option value="shopping">Shopping Center</option> <option value="unassigned">Unassigned</option> </select> <Button variant="outline">Export List</Button> </div> </div> </Card> {/* Guards Grid */} <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> {filteredGuards.map((guard) => ( <Card key={guard.id}> <div className="flex items-start space-x-4"> <div className="h-16 w-16 rounded-full bg-green-100 flex items-center justify-center"> <span className="text-lg font-medium text-green-700"> {guard.name.split(' ').map(n => n[0]).join('')} </span> </div> <div className="flex-1"> <div className="flex justify-between items-start mb-2"> <div> <h3 className="text-lg font-medium text-gray-900">{guard.name}</h3> <p className="text-sm text-gray-600">{guard.license}</p> </div> <span className={getStatusColor(guard.status)}> {guard.status} </span> </div> <div className="space-y-1 mb-3"> <div className="flex justify-between text-sm"> <span className="text-gray-500">Assignment:</span> <span className="font-medium text-gray-900">{guard.assignment}</span> </div> <div className="flex justify-between text-sm"> <span className="text-gray-500">Shift:</span> <span className="text-gray-700">{guard.shift}</span> </div> <div className="flex justify-between text-sm"> <span className="text-gray-500">Experience:</span> <span className="text-gray-700">{guard.experience}</span> </div> <div className="flex justify-between text-sm"> <span className="text-gray-500">Rating:</span> <div className="flex items-center"> <span className="text-yellow-400 mr-1">‚òÖ</span> <span className="text-gray-700">{guard.rating}/5.0</span> </div> </div> <div className="flex justify-between text-sm"> <span className="text-gray-500">Last Check-in:</span> <span className="text-gray-700">{guard.lastCheckIn}</span> </div> </div> {/* Certifications */} <div className="mb-3"> <p className="text-xs text-gray-500 mb-1">Certifications:</p> <div className="flex flex-wrap gap-1"> {guard.certifications.map((cert, index) => ( <span key={index} className="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded"> {cert} </span> ))} </div> </div> {/* Action Buttons */} <div className="flex flex-wrap gap-2"> <Button size="sm" variant="outline">View Profile</Button> <Button size="sm" variant="outline">Edit Assignment</Button> <Button size="sm" variant="outline">Contact</Button> {guard.status === 'Available' && ( <Button size="sm" variant="primary">Assign</Button> )} </div> </div> </div> </Card> ))} </div> {/* Summary Footer */} <div className="mt-8 bg-green-50 border border-green-200 rounded-lg p-4"> <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div> <div className="text-lg font-bold text-green-600">{mockGuards.filter(g => g.status === 'On Duty').length}</div> <div className="text-sm text-gray-600">Currently On Duty</div> </div> <div> <div className="text-lg font-bold text-blue-600">{mockGuards.filter(g => g.status === 'Available').length}</div> <div className="text-sm text-gray-600">Available for Assignment</div> </div> <div> <div className="text-lg font-bold text-yellow-600">{mockGuards.filter(g => g.status === 'Training').length}</div> <div className="text-sm text-gray-600">In Training</div> </div> <div> <div className="text-lg font-bold text-gray-600">{(mockGuards.reduce((sum, g) => sum + g.rating, 0) / mockGuards.length).toFixed(1)}</div> <div className="text-sm text-gray-600">Average Rating</div> </div> </div> </div> </div> ); }; export default Guards;
<end of pages/Guards.tsx>

<start of pages/Operations.tsx>
import React, { useState } from 'react'; import { Card, Button } from '@security-guard/shared'; const Operations: React.FC = () => { const [selectedIncidentType, setSelectedIncidentType] = useState('all'); const recentIncidents = [ { id: 1, time: '14:30', guard: 'Ahmed Hassan', site: 'Warehouse District', client: 'Industrial Co', type: 'Equipment Issue', priority: 'Medium', description: 'RFID scanner malfunction reported during patrol', status: 'In Progress', reportedBy: 'Guard' }, { id: 2, time: '12:15', guard: 'John Smith', site: 'Downtown Mall', client: 'Metro Shopping', type: 'Security Alert', priority: 'High', description: 'Suspicious activity observed in parking lot section B', status: 'Resolved', reportedBy: 'Guard' }, { id: 3, time: '09:45', guard: 'Maria Garcia', site: 'Office Complex A', client: 'TechCorp', type: 'Access Control', priority: 'Low', description: 'Visitor badge system experiencing intermittent issues', status: 'Pending', reportedBy: 'Client' }, { id: 4, time: '08:20', guard: 'Lisa Rodriguez', site: 'Shopping Center', client: 'Retail Plaza', type: 'Medical Emergency', priority: 'High', description: 'First aid provided to customer, paramedics called', status: 'Resolved', reportedBy: 'Guard' } ]; const patrolRoutes = [ { id: 1, name: 'Mall Perimeter Check', site: 'Downtown Mall', checkpoints: 8, frequency: '30 min', status: 'Active', lastCompleted: '25 min ago', assignedGuard: 'John Smith', completionRate: '98%' }, { id: 2, name: 'Office Building Floors', site: 'Office Complex A', checkpoints: 12, frequency: '45 min', status: 'Active', lastCompleted: '15 min ago', assignedGuard: 'Maria Garcia', completionRate: '100%' }, { id: 3, name: 'Warehouse Security Loop', site: 'Warehouse District', checkpoints: 6, frequency: '60 min', status: 'Paused', lastCompleted: '2 hours ago', assignedGuard: 'Ahmed Hassan', completionRate: '85%' }, { id: 4, name: 'Shopping Center Circuit', site: 'Shopping Center', checkpoints: 10, frequency: '20 min', status: 'Active', lastCompleted: '10 min ago', assignedGuard: 'Lisa Rodriguez', completionRate: '96%' } ]; const operationalStats = { activePatrols: 8, todayIncidents: 4, checkInsToday: 247, responseTime: 4.2, guardsOnDuty: 6, sitesMonitored: 8, alertsResolved: 15, clientSatisfaction: 4.7 }; const getPriorityColor = (priority: string) => { switch (priority) { case 'High': return 'bg-red-100 text-red-800 border-red-200'; case 'Medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200'; case 'Low': return 'bg-green-100 text-green-800 border-green-200'; default: return 'bg-gray-100 text-gray-800 border-gray-200'; } }; const getStatusColor = (status: string) => { switch (status) { case 'Resolved': return 'status-badge bg-green-100 text-green-800'; case 'In Progress': return 'status-badge bg-blue-100 text-blue-800'; case 'Pending': return 'status-badge bg-yellow-100 text-yellow-800'; case 'Active': return 'status-badge bg-green-100 text-green-800'; case 'Paused': return 'status-badge bg-red-100 text-red-800'; default: return 'status-badge bg-gray-100 text-gray-800'; } }; const incidentTypes = ['all', 'Security Alert', 'Equipment Issue', 'Access Control', 'Medical Emergency']; const filteredIncidents = selectedIncidentType === 'all' ? recentIncidents : recentIncidents.filter(incident => incident.type === selectedIncidentType); return ( <div> {/* Header */} <div className="mb-8"> <h2 className="text-3xl font-bold text-gray-900">Operations Center</h2> <p className="text-gray-600">Monitor patrol routes, incidents, and real-time operations</p> </div> {/* Operations Summary */} <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8"> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center"> <span className="text-blue-600 text-lg">üîÑ</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">Active Patrols</p> <p className="text-2xl font-bold text-gray-900">{operationalStats.activePatrols}</p> </div> </div> </Card> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center"> <span className="text-orange-600 text-lg">‚ö†Ô∏è</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">Today's Incidents</p> <p className="text-2xl font-bold text-gray-900">{operationalStats.todayIncidents}</p> </div> </div> </Card> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center"> <span className="text-green-600 text-lg">‚úÖ</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">Check-ins Today</p> <p className="text-2xl font-bold text-gray-900">{operationalStats.checkInsToday}</p> </div> </div> </Card> <Card> <div className="flex items-center"> <div className="flex-shrink-0"> <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center"> <span className="text-purple-600 text-lg">‚è±Ô∏è</span> </div> </div> <div className="ml-4"> <p className="text-sm font-medium text-gray-600">Avg Response</p> <p className="text-2xl font-bold text-gray-900">{operationalStats.responseTime} min</p> </div> </div> </Card> </div> {/* Incidents and Patrol Routes Grid */} <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8"> {/* Recent Incidents */} <Card title="Recent Incidents" subtitle="Latest security events and their status" headerAction={ <select value={selectedIncidentType} onChange={(e) => setSelectedIncidentType(e.target.value)} className="text-sm border border-gray-300 rounded px-2 py-1" > {incidentTypes.map(type => ( <option key={type} value={type}> {type === 'all' ? 'All Types' : type} </option> ))} </select> } > <div className="space-y-4"> {filteredIncidents.map((incident) => ( <div key={incident.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors"> <div className="flex justify-between items-start mb-3"> <div className="flex items-center space-x-2"> <span className="text-sm font-medium text-gray-900">{incident.time}</span> <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded border ${getPriorityColor(incident.priority)}`}> {incident.priority} </span> <span className={getStatusColor(incident.status)}> {incident.status} </span> </div> </div> <h4 className="font-medium text-gray-900 mb-1">{incident.type}</h4> <p className="text-sm text-gray-600 mb-2">{incident.description}</p> <div className="grid grid-cols-2 gap-4 text-sm"> <div> <span className="text-gray-500">Guard: </span> <span className="font-medium">{incident.guard}</span> </div> <div> <span className="text-gray-500">Client: </span> <span className="font-medium">{incident.client}</span> </div> <div> <span className="text-gray-500">Site: </span> <span className="font-medium">{incident.site}</span> </div> <div> <span className="text-gray-500">Reported by: </span> <span className="font-medium">{incident.reportedBy}</span> </div> </div> <div className="mt-3 flex space-x-2"> <Button size="sm" variant="outline">View Details</Button> {incident.status !== 'Resolved' && ( <Button size="sm" variant="primary">Take Action</Button> )} </div> </div> ))} </div> <div className="mt-4"> <Button variant="outline" className="w-full">View All Incidents</Button> </div> </Card> {/* Patrol Routes */} <Card title="Active Patrol Routes" subtitle="Real-time patrol monitoring and status"> <div className="space-y-4"> {patrolRoutes.map((route) => ( <div key={route.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors"> <div className="flex justify-between items-start mb-3"> <h4 className="font-medium text-gray-900">{route.name}</h4> <span className={getStatusColor(route.status)}> {route.status} </span> </div> <p className="text-sm text-gray-600 mb-3">{route.site}</p> <div className="grid grid-cols-2 gap-4 text-sm mb-3"> <div> <span className="text-gray-500">Checkpoints: </span> <span className="font-medium">{route.checkpoints}</span> </div> <div> <span className="text-gray-500">Frequency: </span> <span className="font-medium">{route.frequency}</span> </div> <div> <span className="text-gray-500">Completion Rate: </span> <span className="font-medium text-green-600">{route.completionRate}</span> </div> <div> <span className="text-gray-500">Last Completed: </span> <span className="font-medium">{route.lastCompleted}</span> </div> </div> <div className="text-sm mb-3"> <span className="text-gray-500">Assigned Guard: </span> <span className="font-medium">{route.assignedGuard}</span> </div> <div className="flex space-x-2"> <Button size="sm" variant="outline">View Route</Button> <Button size="sm" variant="outline">Edit</Button> {route.status === 'Paused' ? ( <Button size="sm" variant="primary">Resume</Button> ) : ( <Button size="sm" variant="outline">Pause</Button> )} </div> </div> ))} </div> <div className="mt-4"> <Button variant="primary" className="w-full">Create New Route</Button> </div> </Card> </div> {/* Emergency Protocols */} <Card title="Emergency Protocols & Quick Actions"> <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center"> <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4"> <span className="text-red-600 text-2xl">üö®</span> </div> <h4 className="font-medium text-red-800 mb-2">Emergency Alert</h4> <p className="text-sm text-red-600 mb-4">Send immediate alert to all on-duty guards</p> <Button variant="primary" className="w-full bg-red-600 hover:bg-red-700">Send Alert</Button> </div> <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center"> <div className="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4"> <span className="text-yellow-600 text-2xl">‚ö†Ô∏è</span> </div> <h4 className="font-medium text-yellow-800 mb-2">Security Incident</h4> <p className="text-sm text-yellow-600 mb-4">Report and escalate security incidents</p> <Button variant="outline" className="w-full">Report Incident</Button> </div> <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 text-center"> <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4"> <span className="text-blue-600 text-2xl">üìû</span> </div> <h4 className="font-medium text-blue-800 mb-2">Emergency Contacts</h4> <p className="text-sm text-blue-600 mb-4">Quick access to emergency numbers</p> <Button variant="outline" className="w-full">View Contacts</Button> </div> </div> </Card> </div> ); }; export default Operations;
<end of pages/Operations.tsx>

<start of pages/Scheduling.tsx>
import React, { useState } from 'react'; import { Card, Button } from '@security-guard/shared'; const Scheduling: React.FC = () => { const [selectedWeek, setSelectedWeek] = useState('current'); const [selectedDate, setSelectedDate] = useState('2024-01-22'); const mockSchedule = [ { date: 'Mon, Jan 22', dayOfWeek: 'Monday', shifts: [ { id: 1, guard: 'John Smith', site: 'Downtown Mall', time: '8:00 AM - 4:00 PM', status: 'confirmed', client: 'Metro Shopping' }, { id: 2, guard: 'Maria Garcia', site: 'Office Complex A', time: '10:00 PM - 6:00 AM', status: 'confirmed', client: 'TechCorp' }, { id: 3, guard: 'Ahmed Hassan', site: 'Warehouse District', time: '6:00 PM - 2:00 AM', status: 'confirmed', client: 'Industrial Co' }, ] }, { date: 'Tue, Jan 23', dayOfWeek: 'Tuesday', shifts: [ { id: 4, guard: 'Sarah Johnson', site: 'Shopping Center', time: '6:00 AM - 2:00 PM', status: 'pending', client: 'Retail Plaza' }, { id: 5, guard: 'David Chen', site: 'Corporate Plaza', time: '2:00 PM - 10:00 PM', status: 'confirmed', client: 'Business Center' }, { id: 6, guard: 'Lisa Rodriguez', site: 'Downtown Mall', time: '4:00 PM - 12:00 AM', status: 'confirmed', client: 'Metro Shopping' }, { id: 7, guard: 'Unassigned', site: 'Night Watch - Office Complex', time: '11:00 PM - 7:00 AM', status: 'open', client: 'TechCorp' }, ] }, { date: 'Wed, Jan 24', dayOfWeek: 'Wednesday', shifts: [ { id: 8, guard: 'John Smith', site: 'Downtown Mall', time: '8:00 AM - 4:00 PM', status: 'confirmed', client: 'Metro Shopping' }, { id: 9, guard: 'Ahmed Hassan', site: 'Warehouse District', time: '4:00 PM - 12:00 AM', status: 'confirmed', client: 'Industrial Co' }, { id: 10, guard: 'Unassigned', site: 'Emergency Coverage - Shopping Center', time: '2:00 AM - 10:00 AM', status: 'urgent', client: 'Retail Plaza' }, ] }, { date: 'Thu, Jan 25', dayOfWeek: 'Thursday', shifts: [ { id: 11, guard: 'Maria Garcia', site: 'Office Complex A', time: '9:00 AM - 5:00 PM', status: 'confirmed', client: 'TechCorp' }, { id: 12, guard: 'David Chen', site: 'Corporate Plaza', time: '1:00 PM - 9:00 PM', status: 'confirmed', client: 'Business Center' }, { id: 13, guard: 'Lisa Rodriguez', site: 'Shopping Center', time: '3:00 PM - 11:00 PM', status: 'pending', client: 'Retail Plaza' }, ] }, { date: 'Fri, Jan 26', dayOfWeek: 'Friday', shifts: [ { id: 14, guard: 'John Smith', site: 'Downtown Mall', time: '7:00 AM - 3:00 PM', status: 'confirmed', client: 'Metro Shopping' }, { id: 15, guard: 'Sarah Johnson', site: 'Warehouse District', time: '5:00 PM - 1:00 AM', status: 'confirmed', client: 'Industrial Co' }, { id: 16, guard: 'Ahmed Hassan', site: 'Corporate Plaza', time: '10:00 PM - 6:00 AM', status: 'confirmed', client: 'Business Center' }, { id: 17, guard: 'Unassigned', site: 'Weekend Security - Office Complex', time: '6:00 PM - 2:00 AM', status: 'open', client: 'TechCorp' }, ] } ]; const weekStats = { totalShifts: 32, confirmedShifts: 24, pendingShifts: 4, openShifts: 4, availableGuards: 12, onDutyNow: 5, trainingGuards: 2, onLeave: 1 }; const getStatusColor = (status: string) => { switch (status) { case 'confirmed': return 'status-badge bg-green-100 text-green-800'; case 'pending': return 'status-badge bg-yellow-100 text-yellow-800'; case 'open': return 'status-badge bg-red-100 text-red-800'; case 'urgent': return 'status-badge bg-red-100 text-red-800 animate-pulse'; default: return 'status-badge bg-gray-100 text-gray-800'; } }; const periods = [ { id: 'previous', label: 'Previous Week' }, { id: 'current', label: 'Current Week' }, { id: 'next', label: 'Next Week' } ]; return ( <div> {/* Header */} <div className="mb-8 flex justify-between items-center"> <div> <h2 className="text-3xl font-bold text-gray-900">Shift Scheduling</h2> <p className="text-gray-600">Manage guard schedules and assignments</p> </div> <div className="flex gap-2"> <Button variant="outline">Import Schedule</Button> <Button variant="outline">Copy Previous Week</Button> <Button variant="primary">Create Shift</Button> </div> </div> {/* Week Overview Cards */} <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8"> <Card title="This Week's Shifts"> <div className="space-y-2"> <div className="flex justify-between"> <span className="text-gray-600">Total:</span> <span className="font-medium">{weekStats.totalShifts}</span> </div> <div className="flex justify-between"> <span className="text-green-600">Confirmed:</span> <span className="font-medium text-green-600">{weekStats.confirmedShifts}</span> </div> <div className="flex justify-between"> <span className="text-yellow-600">Pending:</span> <span className="font-medium text-yellow-600">{weekStats.pendingShifts}</span> </div> <div className="flex justify-between"> <span className="text-red-600">Open:</span> <span className="font-medium text-red-600">{weekStats.openShifts}</span> </div> </div> </Card> <Card title="Guard Availability"> <div className="space-y-2"> <div className="flex justify-between"> <span className="text-gray-600">Available:</span> <span className="font-medium">{weekStats.availableGuards}</span> </div> <div className="flex justify-between"> <span className="text-green-600">On Duty:</span> <span className="font-medium text-green-600">{weekStats.onDutyNow}</span> </div> <div className="flex justify-between"> <span className="text-blue-600">Training:</span> <span className="font-medium text-blue-600">{weekStats.trainingGuards}</span> </div> <div className="flex justify-between"> <span className="text-gray-600">On Leave:</span> <span className="font-medium text-gray-600">{weekStats.onLeave}</span> </div> </div> </Card> <Card title="Coverage Status"> <div className="space-y-2"> <div className="flex justify-between"> <span className="text-gray-600">Sites:</span> <span className="font-medium">8 locations</span> </div> <div className="flex justify-between"> <span className="text-green-600">Fully Covered:</span> <span className="font-medium text-green-600">6 sites</span> </div> <div className="flex justify-between"> <span className="text-yellow-600">Partial:</span> <span className="font-medium text-yellow-600">1 site</span> </div> <div className="flex justify-between"> <span className="text-red-600">Gaps:</span> <span className="font-medium text-red-600">1 site</span> </div> </div> </Card> <Card title="Weekly Performance"> <div className="space-y-2"> <div className="flex justify-between"> <span className="text-gray-600">Completion:</span> <span className="font-medium">94.2%</span> </div> <div className="flex justify-between"> <span className="text-green-600">On Time:</span> <span className="font-medium text-green-600">96.8%</span> </div> <div className="flex justify-between"> <span className="text-blue-600">Client Rating:</span> <span className="font-medium text-blue-600">4.7/5</span> </div> <div className="flex justify-between"> <span className="text-purple-600">Revenue:</span> <span className="font-medium text-purple-600">$38.5k</span> </div> </div> </Card> </div> {/* Week Selector and Actions */} <Card className="mb-6"> <div className="flex flex-col lg:flex-row justify-between gap-4"> <div className="flex gap-2"> {periods.map((period) => ( <button key={period.id} onClick={() => setSelectedWeek(period.id)} className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${ selectedWeek === period.id ? 'bg-green-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200' }`} > {period.label} </button> ))} </div> <div className="flex gap-2"> <Button variant="outline">Auto-Fill Gaps</Button> <Button variant="outline">Export Schedule</Button> <Button variant="primary">Publish Schedule</Button> </div> </div> </Card> {/* Daily Schedule */} <div className="space-y-6"> {mockSchedule.map((day, dayIndex) => ( <Card key={dayIndex} title={day.date} subtitle={`${day.shifts.length} shifts scheduled`}> <div className="space-y-3"> {day.shifts.map((shift) => ( <div key={shift.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 transition-colors"> <div className="flex items-center space-x-4"> <div className="h-12 w-12 rounded-full bg-green-100 flex items-center justify-center"> <span className="text-sm font-medium text-green-700"> {shift.guard !== 'Unassigned' ? shift.guard.split(' ').map(n => n[0]).join('') : '?'} </span> </div> <div className="flex-1"> <div className="flex items-center space-x-2 mb-1"> <p className="font-medium text-gray-900">{shift.guard}</p> <span className={getStatusColor(shift.status)}> {shift.status} </span> </div> <p className="text-sm text-gray-600">{shift.site}</p> <p className="text-sm text-gray-500">Client: {shift.client}</p> </div> </div> <div className="flex items-center space-x-4"> <div className="text-right"> <p className="text-sm font-medium text-gray-900">{shift.time}</p> <p className="text-xs text-gray-500"> {shift.status === 'urgent' ? 'URGENT COVERAGE NEEDED' : shift.status === 'open' ? 'Needs Assignment' : 'Scheduled'} </p> </div> <div className="flex flex-col space-y-1"> <Button size="sm" variant="outline">Edit</Button> {(shift.status === 'open' || shift.status === 'urgent') && ( <Button size="sm" variant="primary">Assign</Button> )} {shift.status === 'pending' && ( <Button size="sm" variant="outline">Confirm</Button> )} </div> </div> </div> ))} {/* Add Shift Button */} <button className="w-full p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-green-500 hover:text-green-600 transition-colors"> + Add Shift for {day.dayOfWeek} </button> </div> </Card> ))} </div> {/* Quick Actions Footer */} <div className="mt-8 bg-green-50 border border-green-200 rounded-lg p-6"> <h3 className="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" className="justify-center"> üîÑ Auto-Fill Open Shifts </Button> <Button variant="outline" className="justify-center"> üì± Send Schedule to Guards </Button> <Button variant="outline" className="justify-center"> üìä Generate Weekly Report </Button> </div> </div> </div> ); }; export default Scheduling;
<end of pages/Scheduling.tsx>